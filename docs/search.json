[
  {
    "objectID": "3_publish_with_github_pages.html",
    "href": "3_publish_with_github_pages.html",
    "title": "3. Publish your website with Github Pages",
    "section": "",
    "text": "Congratulations for having made it so far 😁 ! Now that we have a decent-looking basis for our online portfolio, we are ready to make it available to the real world. In order for us to publish our content, we are going to use GitHub Pages, a website hosting service of GitHub.\nThis final step is the easiest one, so hang in there, we are soon reaching the end of this tutorial 😁.",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#saving-our-changes",
    "href": "3_publish_with_github_pages.html#saving-our-changes",
    "title": "3. Publish your website with Github Pages",
    "section": "Saving our changes",
    "text": "Saving our changes\nBefore we publish our website, we have to make sure we saved all of our changes. Let us do a quick recap of our workflow here :\n\nWe create our repository on Github and open it in our computer.\nWe create a Quarto project in vscode, and make some changes to our qmd and yml files.\nWe stop the previewing process in our Terminal by clicking in it and entering cmd+c or clicking on the trash bin that appears when we pass our mouse on it at the right-bottom part of vscode.\nWe make sure all of our files are saved and enter quarto render in the Terminal.\nWe add all of our changes in Git and commit them, depending on our method :\n\nThrough the commit button in Github Desktop,\nThrough the git add * and git commit -m \"...\" commands via the CLI\n\nWe publish our changes in our Github repository, depending on our method :\n\nThrough the “publish” buttons in Github Desktop,\nThrough the git push command via the CLI.\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.1 : First, commiting the changes in Github Desktop.\n\n\n\n\n\n\n\nFigure 3.2 : Second, publishing our changes to Github via Github Desktop.\n\n\n\n\n\nOn Github Desktop, we should have a message like “Last fetched just now” just under the publish “Publish” button, that has now turned into a “Fetch origin” button :\n\n\n\nFigure 3.3 : Commited changes with Github Desktop.\n\n\nNow, our changes are saved on Github and ready to be published on the Web !",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#activating-github-pages",
    "href": "3_publish_with_github_pages.html#activating-github-pages",
    "title": "3. Publish your website with Github Pages",
    "section": "Activating GitHub Pages",
    "text": "Activating GitHub Pages\nIn order for us to publish the content that is available in our docs folder, we need first to goto our GitHub repository, and to click on “Settings”, the last item of the top-bar :\n\n\n\nFigure 3.4 : Our Github repository, after having added our Quarto files.\n\n\nWe then click in the “Code and automation” on the “Pages” section :\n\n\n\nFigure 3.5 : After having clicked on “Settings”, we should land on the “General” section. Now, we click on “Pages”.\n\n\nWe should be seeing something like this :\n\n\n\nFigure 3.6 : The “Pages” section of the settings.\n\n\nWe are now going to activate GitHub Pages, and select “Deploy from a branch” for the Source. We select the folder from which GitHub Pages publishes our website. In our case, it is the “docs” folder we created in the last section of the second chapter. The branch from which it selects the folder should be “main” or “master” (but could have another name) depending on our git configuration.\n\n\n\nFigure 3.7 : Selecting the “main” branch and the “docs” folder.\n\n\nAfter selecting it, we can click on “Save”. Github will popup a bar at the top of the page indicating : “GitHub Pages source saved.” Also, a “Custom domain” section should appear, that we can later configurate if we wish to have our own customed URL :\n\n\n\nFigure 3.8 : After saving our source.\n\n\nNow, GitHub is going to test our code to see if it is possible to publish it online without errors. If we come back to the home page of our repository, we will notice an orange dot next to our last commit message. If we click on this orange dot, a small pop-up window will appear, with additional information on the test.\n\n\n\n\n\n\n\n\n\nFigure 3.9 : Home page of our repository, with now a test being run by Github Pages.\n\n\n\n\n\n\n\nFigure 3.10 : Additional information on the current test.\n\n\n\n\n\nNow, if we click on “Details”, we can have more information on what is going on :\n\n\n\nFigure 3.11 : Details of the test being run.\n\n\nAt this point, if we followed carefully the steps of this tutorial, everything should turn green in a few seconds.\n\nIf a test did not pass, you can click on it to get more information. You can then look into it by searching solutions online. Errors are very common and a lot of possible solutions have been proposed. You can check the official guide of Github here and the guide of Quarto here. Stack Overflow is also a very good platform to find solutions.\n\n\nIf you see an error message related to Jekyll, try adding an empty file named .nojekyll in your folder by entering touch .nojekyll in your vscode terminal. Publish this change to your Github repository, and see if the test is passing. This issue seems to occur regularly, but not in all cases.\n\nOnce all the dots are green, we can go to https://username.github.io, with our actual GitHub username instead of “username”. After a few minutes, it should be on.\nCongratulations, you have published your portfolio ! 🔥 🔥 🔥\n\n\n\nFigure 3.12 : Our basic portfolio is online.\n\n\nWe see that it is online with the URL. In my case, I see “https://frpgcd.github.io”, and not something with “localhost”. Try accessing your website from another machine, be it a computer or a mobile phone. It should work !",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#further-resources",
    "href": "3_publish_with_github_pages.html#further-resources",
    "title": "3. Publish your website with Github Pages",
    "section": "Further resources",
    "text": "Further resources\nIf you wish to understand more about the publishing process, you can find more information in the following material :\n\nThe Quarto documentation\nThe Github guide for Github Pages\n\nIn order to understand better what the publication process is, it is also useful to understand how internet works, and what the difference between frontend and backend development is :\n\nThe Wikipedia article about Internet is a good starting point.\nTo understand what the frontend is, you can check the Wikpedia article of the topic or this w3school guide.\nSimilarly for the backend, you can check the Wikibooks article.\n\nYou can also check this Wikipedia article about the difference between Front and Backend.",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "3_publish_with_github_pages.html#epilog",
    "href": "3_publish_with_github_pages.html#epilog",
    "title": "3. Publish your website with Github Pages",
    "section": "Epilog",
    "text": "Epilog\n🎉 Congratulations on finishing this tutorial. I hope you enjoyed it. If you noticed some things that seemed wrong, too complicated, or some bugs in the website, please reach to me. This tutorial is currently under construction and I am trying to improve it as much as possible.\n\nIf you want to suggest some modification to this tutorial, you can also click on the top-right buttons “Report an issue” (“Edit this page” will create a pull request on Github. Feel free to take a look at what it does) under the table of content of this chapter 😉.",
    "crumbs": [
      "Home",
      "3. Publish your website with Github Pages"
    ]
  },
  {
    "objectID": "1_git_and_github.html",
    "href": "1_git_and_github.html",
    "title": "1. Setting up our workflow",
    "section": "",
    "text": "Welcome in this tutorial to create your own online portfolio 🙂! The first step of our journey to set up our working environment. In order to do so, we are going to use several tools, like Git, GitHub and Visual Studio Code.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#git-and-github",
    "href": "1_git_and_github.html#git-and-github",
    "title": "1. Setting up our workflow",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a software that allows to manage all the changes done to the selected files. It is also called a version management software, or a version control system. Do we want to check all the versions and changes of our files from their creation until their current version? If we use Git, it is possible.\n\nGit isn’t just for code: it works with any kind of file. For example, if you’re writing a text file like a Master’s thesis and want to keep track of different versions, you can use Git for that.\n\nGitHub is a company (currently owned by Microsoft) whose servers can be used to store files. Their website integrates Git and uses it to track the changes of all the documents we choose to store on it.\n\nGitHub has a lot of different uses, including collaborative coding, but this tutorial only focuses on how to use it to manage our project with Git and Quarto. It is widely used in the programming community and is sometimes referred to as the social network of developers.\n\nThis tutorial offers two methods to use Git and GitHub :\n\nThe first one is based on the Graphical User Interface (GUI) solution of GitHub Desktop. It is an application that offers a simple interface to interact with Git and GitHub at the same time. It is simple and quick to setup.\nThe second method is based on the Command Line Interface (CLI) approach. It uses the basic features of Git and GitHub, and relies on the Command Line to interact with both. It requires more steps, and is harder to setup, but allows to develop a deeper understanding of what is going on when we use Git and GitHub.\n\nIf we do not wish to dive deep into the mechanisms of the Git and its interactions with GitHub, we can proceed with the GUI approach.\n\nWhile the GUI approach is easy and useful, it implies necessarily abstractions of how things are really working under the hood. Therefore, I highly encourage you to read the CLI section, even if you do not follow all of its instruction. You can always continue with the GUI approach, and later on come back to this chapter to read the CLI section once you are done with the tutorial.\n\n\nGitHub Desktop : The Graphical User Interface (GUI)Git Command Line Interface (CLI)\n\n\n\nCreate your GitHub account\nThe first step is to create a GitHub account. We can go here and click on “Sign up”.\nWe have to be especially thoughtful of our username, because our website will include it in its URL. It will indeed have the format “https://username.github.io”.\nAfter having created our account, we should land on a page looking like this :\n\n\n\nFigure 1.1 : The starting page of GitHub.\n\n\nFor this tutorial, I did create an account named “frpgcd”. It will be the example username you will see in all the screenshots.\n\n\nInstall and configure GitHub Desktop\nThe next step is to install GitHub Desktop here.\n\n\n\nFigure 1.2 : GitHub Desktop landing page.\n\n\nOnce the installation is done, we can open GitHub Desktop and connect it to our recently created GitHub account. By clicking on “Sign in to GitHub.com”, we should be redirected to a connection page on our browser, and once we are connected on our browser, we are asked if we authorize GitHub Desktop to have access to our GitHub account.\n\n\n\n\n\n\n\n\n\nFigure 1.3 : Starting page of GitHub Desktop.\n\n\n\n\n\n\n\nFigure 1.4 : Authorization page to GitHub.\n\n\n\n\n\n\nGitHub Desktop initialization.\n\n\n\nThen, we will be redirected to a configuration page on GitHub Desktop. We can here notice that a slightly different email address can be specified by default instead of the one we used in the creation process of our GitHub account. This is normal, and does not matter much for what we are trying to achieve here. We can also finish the configuration process with this default different email address.\n\n\n\nFigure 1.5 : GitHub Desktop configuration.\n\n\nOnce we are done with the configuration process, we should land on a page looking like that :\n\n\n\nFigure 1.6 : GitHub Desktop home page.\n\n\nIf we want to start our portfolio, we need a folder with all of our files. On our computer, we call it a directory, and on GitHub we call it a “repository”.\nWe click on “Create a New Repository on your Local Drive…”, and create a repository called “username.github.io”, with our actual username instead of “username”. I will create one, and since my GitHub username example is frpgcd, my repository will be called “frpgcd.github.io” :\n\n\n\nFigure 1.7 : Creating a repository on GitHub Desktop.\n\n\nNow, we should get something looking like that :\n\n\n\nFigure 1.8 : An empty repository on GitHub desktop.\n\n\nLet us take a moment to comment what we see. In the left side bar, we have all the modified files of our directory. Here, GitHub desktop automatically created a .gitattributes file. In the right side interface, we see the content of the selected files. Here, we see that two lines have been added, thanks to the green color and the addition sign “+”.\nNow, if we make any change in our folder, we will be able to commit the changes. “Commit” means here that the changes will be recorded in the history of the folder. Once our changes are commited, we can “push” them on our GitHub repository with the top-right button. If we want to “push” for the first time, we first have to publish the repository, i.e. create a distant repository on GitHub. We do it with the top-right button “Publish repository”.\nIn order for us to add files to our directory and modify them, we are now going to use another tool : Visual Studio Code.\n\n\n\nThis section presents the method to use Git and GitHub via the Command Line Interface (CLI).\n\nInstall vscode\nIt is much easier to use the CLI of Git with vscode. Therefore, we should first install vscode. I invite you to follow the instruction of the last section of this chapter and to come back here once you are finished with it.\n\n\nBasics of Git\nOnce we installed vscode, we can install Git from here.\n\n\n\nFigure 1.9 : The installation page of Git.\n\n\nOnce it is done, we can go back to vscode and open a new terminal console while having our folder “usernamen.github.io” open.\nNow, to understand how to use Git, we need to stop for a moment, and have in mind the four main steps of our workflow :\n\nFirst, we have to initialise git in a folder. This will create a directory called .git in our current folder, that will be the logbook in which the history of all of our changes will be stored.\nSecond, we have to choose which files we track with Git. The changes of the tracked files will be registered in the .git folder.\nWe can now work on our files. Once we want to save the changes of the files, we ‘add’ the modified files to the logbook.\nFinally, we have to describe the changes. Without descriptions, the changes won’t be saved in the logbook. To describe the changes, we write a ‘commit’ in the logbook.\n\nConcretely, using vscode :\n\nWe write git init in the terminal console to initialise a git folder. This create a hidden directory inside of our folder, named .git. You must not necessarily see it to use git.\nWe then click on “new file” on vscode, for example a text-file. We write something in it, and save it as text.txt.\nWe begin tracking this file with git, using git add text.txt.\nWe describe our action using git commit -m \"Adding a text file.\".\n\n\nTo create a new file, you can also use the touch command in the terminal. For example, touch text.txt to create an empty file named text.txt.\n\nAt this point, we should have something like that :\n\n\n\nFigure 1.10 : Initializing git, adding a file, and commiting this change.\n\n\nAt any moment, we can use some other git commands to have more information. For example :\n\ngit status informs us about which files in our folder are being tracked, and what modifications are not yet registered.\ngit log gives back the logbook, i.e. the list of changes that were saved.\ngit diff gives the differences between the current version of your files and the latest version saved in the logbook.\n\n\nTo exit the special mode the terminal enters after you enter git log or git diff, you can enter q and then the return key. This special mode is denoted by the : displayed at the last line of the terminal. For more information about this issue, you can check this.\n\nFinally, it is also useful to set up a branch. Simply put, a branch is the path in which we are registering all our commits and files. Creating and programming on another branch would be aking to continuing the development of our code on a parallel version of our project, without modifying the “main” version of it (often called the “main” branch). It is important to set up a main branch, in order for Git not to bug in future operations. In order to do so, we can enter : git branch -M main in the terminal.\nGit is a very powerful tool that allows to do a lot of collaborative code managing, but we choose here to mainly exploit one of its features : remote synchronization. Ideed, in addition to having this local logbook on our computer, we can also send your files to a remote server, in a similar way than the cloud or a remote drive works. This is where GitHub enters into play.\n\n\nBasics of GitHub\nTo use GitHub, the first step is to go to GitHub and create an account. Once our account is created, we can create a repository, named “username.github.io”, replacing “username” with our actual user name. Since I choose the username frpgcd, I will create in this example a repository name “frpgcd.github.io”.\n\n\n\nFigure 1.11 : Click on the green button “Create a repository”.\n\n\n\n\n\nFigure 1.12 : Starting page of the repository creation process.\n\n\n\n\n\nFigure 1.13 : Page of the repository creation process filled with information.\n\n\n\nNote : During the creation process of a repository, we are asked for a license. It is important to chose one, because without it, the most restrictive policy applies. After a quick research, it seems that the Creative Commons BY-NC-ND 4.0 Deed license should cover all the cases we need for an online academic portfolio. It is very permissive, but requires citation (“appropriate credit”), does not allows for commercial uses and derivatives. If your needs are different, it is worth looking into different kinds of license to see which one is better for your own usage.\n\nOnce it is done, we can go back to vscode, to add a connection between our local folder and the remote repository we just created. In order to do that, we first have to configurate git.\n\nEnter git config --global user.name \"Your Name\", replacing “Your Name” with the name of your choice. It doesn’t have to be the same as your GitHub user name.\nEnter git config --global user.email \"your@mail.com\", replacing “your@mail.com” with the email of your choice. Note that it does not require you to actually have access to this email adress.\nThen, we have to add an ssh key to our GitHub account. An ssh key allows you to communicate to GitHub from your computer. Enter ssh-keygen -t ed25519 -C \"your@email.com\", replacing “your@email” with your actual email. Your terminal will ask for a passphrase, but it’s better for simplicity purposes to not enter anything, and just press the enter key on your keyboard.\n\nIn my case, with the username “frpgcd”, I would enter in my Terminal console :\ngit config --global user.name \"frpgcd\"\ngit config --global user.email \"frpgcd@mail.com\"\nssh-keygen -t ed25519 -C \"frpgcd@email.com\"\n\nNow, we are going to use this key to establish a connection between our computer and our GitHub account. On our terminal, we can enter cat ~/.ssh/id_ed25519.pub or open ~/.ssh/id_ed25519.pub, and it will give us back a character string beginning with “ssh-ed22519”. We then go to our GitHub account, click on our profile picture at the top right of the website, choose “settings”, then click on “ssh and gpg keys”, then on “add new ssh key”, choose the title you want (for example the name of our current computer), and in “key”, add the value your terminal gave back to us. We should be connected!\n\n\n\n\nFigure 1.14 : In our settings, we must find the ssh and gpg keys section.\n\n\n\n\n\nFigure 1.15 : After having clicked on “New SSH Key”, we can add what we get from our terminal after entering “cat ~/.ssh/id_ed25519.pub” in the “Key” section.\n\n\n\nYou should not share your ssh keys to the public. It could jeopardize the safety of your connection and access to the distant repository.\n\n\nNow that our GitHub account is connected to our computer, we have to connect our local folder to a repository. We must go on our repository, and copy the text it gives us in the SSH section (it should be something like “git@github.com:username/name_of_the_repository.git”). In our vscode terminal, with our folder open, we can then enter : git remote add origin git@github.com:username/name_of_the_repository.git. The connection between our local folder and distant repository should be established.\nWe can “push” the content of our local folder to our remote folder. This is a command that we use once all the changes are commited in our logbook to send all the information in the remote server. To be able to push correctly, you first enter git push -u origin main, and then you can just enter git push for the next times, when your changes are added and commited.\n\nIn my case, I have, with the username “frpgcd” and the repository “frpgcd.github.io” :\ngit remote add origin git@github.com:frpgcd/frpgcd.github.io.git\ngit push -u origin main\n\nYou can also initialise a git folder in another directory, and “clone” an existing GitHub repository. This will create a duplicate of this repository in your folder and on your GitHub account, or just load the data locally if it is one of your repositories. Although this is not covered in the current tutorial, you can check the GitHub and Git documentations to get more information on those operations.\n\n\n\nUse Git and GitHub together\nNow that the connection between your local folder and your distant repository has been created, you can add modifications to your folder (like creating a new file), add those changes via git add followed by the name of your new document (you can also use * to select everything in your folder), commit those changes via git commit -m \"the description of your changes\", and then push those changes via git push. This add-commit-push process is one of the basics to synchronize your local folder with the files of your GitHub account.\nFor example, if we want to create a new file, named “new_file.txt”, to enter some text in it, to save it and to track it with git, and then to send it to our distant GitHub repository, we would do, after saving the file :\ngit add new_file.txt\ngit commit -m \"Adding a new file.\"\ngit push\nYou can then verify that your changes have been taken into account by going on the website of GitHub, on your repository. Your tracked files should appear there.\n\nGitHub also has a CLI tool, that allows (among other features) to create repositories from your terminal. It is very powerful and very useful. You can check it out here.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#visual-studio-code",
    "href": "1_git_and_github.html#visual-studio-code",
    "title": "1. Setting up our workflow",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nVisual Studio Code (VSC or vscode) is a software to write and execute code, also called Integrated Development Environment (IDE). It is largely used, and many extensions exist to customize one’s experience with it. We are going to install vscode here.\n\n\n\nFigure 1.16 : Dowload page of vscode.\n\n\nOne of the strengths of vscode is the fact that it can open and manage a whole folder. We are now going to use vscode to open the folder “username.github.io” that we created earlier. To do so, we open vscode, click on “open” in the starting page, and select our folder.\n\nIn some versions of vscode, two options exist for opening a file or a folder. Be sure to select the option to open a folder and not a file.\n\n\n\n\nFigure 1.17 : Starting page of vscode. Click on “open” to chose a folder to open.\n\n\nNow that we selected our folder, vscode opened it and we should see something like that :\n\n\n\nFigure 1.18 : An empty folder opened with vscode.\n\n\n\nNOTE : When a folder is opened for the first time, vscode may ask “Do you trust the authors of the files in this folder?”. Since you just created your folder and that it is empty, you can naturally click on yes: You are the author!\n\nWe are almost done. The last step is to create a terminal within vscode. In order for us to do that, we go the research bar at the top and enter “&gt;Terminal: Create New Terminal”. This will pop-up a terminal console in vscode.\n\nThis command opens a Terminal at the location of the current opened folder. If you have multiple installed shells software or programming languages in your computer, vscode has an alternative command “&gt;Create New Terminal (With Profile)”, that will give you the possibility to choose the language or shell you want to open the Terminal with.\n\n\n\n\nFigure 1.19 : How to create a new terminal on vscode.\n\n\nThis should normally generate a console at the bottom of vscode, where our username, the name of our computer, and/or the name of our current folder do appear :\n\n\n\nFigure 1.20 : Terminal in vscode.\n\n\nSimply put, the terminal allows to textually communicate with your machine, instead of graphically, like it is most often the case. For those following the CLI section, we use Git with the terminal, and it is the reason the section is called the Command Line Interface section. Having a terminal opened in vscode makes it possible to manipulate the current opened folder more easily. This is also how we will be using Quarto in the next chapter.\n\nThis tutorial does not focus on what a terminal is, what shell, bash or any kinds of line command are and do. However, it would be very useful for you to know how to use the basics of it. Further resources are available at the end of this page, and I strongly encourage you to check them, especially the first four chapters of Florian Oswald’s lecture on the shell.\n\n🎉 It is done! We have created a GitHub account, connected it to our GitHub Desktop application, created a repository, and opened it with vscode. Next step : use Quarto to create web content.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "1_git_and_github.html#further-resources",
    "href": "1_git_and_github.html#further-resources",
    "title": "1. Setting up our workflow",
    "section": "Further Resources",
    "text": "Further Resources\nWe are now ready to proceed to the second chapter, that deals with content generation with Quarto. However, if you wish to dive deeper into the tools presented in this first chapter, and try to understand better Git, GitHub, or even the Terminal and Visual Studio Code, you might be tempted to look at additional material. First of all, for all that has been covered in this tutorial, I recommend the lecture of Florian Oswald about Git and GitHub, available here. For more specific questions, you might find the following resources useful :\nAbout vscode :\n\nThe official documentation of vscode, available here.\n\nAbout the terminal :\n\nThe first four sessions of the Florian Oswald lecture, available here.\nA general tutorial about the command line, including resources for Windows, MacOS, and Linux, available here.\nThe vscode documentation about the terminal inside vscode, that might require some prior knowledge about the command line, available here.\n\nAbout Git :\n\nThe official documentation of Git, availbale here.\nThe w3school tutorial for Git, available here.\n\nAbout GitHub :\n\nThe official tutorial of GitHub on using Git and GitHub together, available here.",
    "crumbs": [
      "Home",
      "1. Setting up our workflow"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research student portfolio tutorial",
    "section": "",
    "text": "Would you like to have an online portfolio to share your work in research 🤔, but you do not have much time and are not proficient in web development 😕 ? Welcome to this research student portfolio tutorial 😮 !",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#objective-of-this-tutorial",
    "href": "index.html#objective-of-this-tutorial",
    "title": "Research student portfolio tutorial",
    "section": "Objective of this tutorial",
    "text": "Objective of this tutorial\n\nThis tutorial aims to give the right tools to any research student who wants to publish and maintain their portfolio in a quick and efficient way.\nIt requires no prior programming experience.\nYou can find all the material and code of this tutorial on this GitHub repository.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#structure-and-material",
    "href": "index.html#structure-and-material",
    "title": "Research student portfolio tutorial",
    "section": "Structure and material",
    "text": "Structure and material\nThis tutorial is divided in three main chapters :\n\n\n\nChapter\nSummary\n\n\n\n\n1. Setting up your workflow\nIn this chapter, you will learn what Git and GitHub are, and how to use them. This will help you set up the workflow used in the rest of the tutorial.\n\n\n2. Creating your content with Quarto\nIn this chapter, you will learn to create and modify web content with Quarto. This will help you create the content of our portfolio.\n\n\n3. Publish your website with GitHub Pages\nIn this chapter, you will learn how to publish your website, i.e. make it accessible to everyone on the Internet.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "index.html#further-resources",
    "href": "index.html#further-resources",
    "title": "Research student portfolio tutorial",
    "section": "Further resources",
    "text": "Further resources\nAt the end of each chapter, you will find some useful complementary resources. Here are the main ones :\n\nFor the first chapter, I learned a lot in Florian Oswald’s class, Associate Professor of Economics at Sciences Po in Paris, and my teacher to introduction to programming.\nThe second chapter takes some important elements from the great documentation of Quarto and on their discussion forum on GitHub.\nThe last chapter is based on the guide of GitHub Pages of GitHub and complementary research on Stack Overflow to troubleshoot errors.",
    "crumbs": [
      "Home",
      "Research student portfolio tutorial"
    ]
  },
  {
    "objectID": "foreword.html",
    "href": "foreword.html",
    "title": "Foreword",
    "section": "",
    "text": "This tutorial aims to give you the tools to easily and efficiently create, and maintain your own online portfolio.\nIt is divided in three chapters :\n\nThe first chapter focuses on creating a simple workflow for the rest of our work.\nWe will use Git, Github, and Visual Studio Code.\nThe second capter focuses on the design of the website.\nWe will use Quarto.\nThe third and last chapter focuses on the publication of our website.\nWe will use Github Pages.\n\nNo prior programming experience is required to follow this tutorial.\nI hope you will enjoy it 😁 !\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Foreword"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello 👋, I am Paulo Gugelmo Cavalheiro Dias, a former Research School student of the Master in Economics at Sciences Po.\nI made this tutorial to make it easy for research students to create their own online portfolio. It is made so that even someone with no prior programming experience can understand and follow its steps.\nFeel free to visit my main website by clicking on “Home”, the first item of the navigation bar of this page. I posted and will post other projects there.\nYou can also contact me per mail via “paulo.gugelmocavalheirodias” followed by “@sciencespo.fr”.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "2_quarto.html",
    "href": "2_quarto.html",
    "title": "2. Creating our content with Quarto",
    "section": "",
    "text": "Now that we know how to make use of GitHub and Visual Studio Code, we are going to use Quarto to create our website 🎨 !\nQuarto is a static website generator. It is a software that allows us to create web content from human readable files.\nUsually, we should learn HTML and CSS, and JavaScript to know a bit of Web development. Indeed, those are the languages that traditional web browsers support. When we go to a webpage, our web browser transforms html and css into a graphical interface, which is easier to understand for humans. Javascript allows us to implement interactive features. However, in recent years, a lot of static website generators have emerged, making the creation of websites much easier. Among them, Jekyll, Zola, Hugo, and Quarto can be cited, but they are far from being the only ones available.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#installation-of-quarto",
    "href": "2_quarto.html#installation-of-quarto",
    "title": "2. Creating our content with Quarto",
    "section": "Installation of Quarto",
    "text": "Installation of Quarto\nThe first step of this chapter is to download Quarto here.\n\n\n\nFigure 2.1 : Installation page of Quarto\n\n\nOnce it is done, we will be able to interact with Quarto through the terminal of vscode.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#create-a-quarto-project",
    "href": "2_quarto.html#create-a-quarto-project",
    "title": "2. Creating our content with Quarto",
    "section": "Create a Quarto project",
    "text": "Create a Quarto project\nNow that Quarto is installed, we can create a Quarto project in our folder (the one we synchronized with our online GitHub repository). In order to do that, we go back to vscode, and enter quarto create in the terminal of our open folder.\n\n\n\nFigure 2.2 : Creation of a project with Quarto\n\n\nAfter entering quarto create, Quarto asks us different things :\n\nThe nature of the Quarto environment we want to create. We have the choice between a project and an extension. We are going to choose project.\nThe type of our project. It gives us the choice between :\n\ndefault\nwebsite\nblog\nmanuscript\nbook\nconfluence\n\nWe could choose several options here. For example, default would work well enough also. However, let’s stick to website for the sake of simplicity.\nQuarto then asks for the Directory we wish to create our Quarto project in. Since we are already in the folder we opened with vscode, we should write a simple dot . and press enter.\n\n\nThe dot . refers to the current directory in several langages. To understand better how a path works, we can consult this article.\n\nOnce the creation process is done, we will see appear in our folder several files : index.qmd, about.qmd, _quarto.yml, style.css.\nLet us take a moment to comment on what they do :\n\nThe files with a “.css” extension are Cascading Style Sheets (css) files. Together with HTML, CSS is one of the main languages for web development. Those kinds of files are mainly responsisble for the appearance and design of websites. It is not necessary to modify them for the purpose of this tutorial, but we can inform ourselves about it on this page.\nThe files with a “.qmd” extension are Quarto files. This extension stands for Quarto MarkDown (qmd). They correspond to what the future pages of our website will be. They support various langages, like traditional Markdown, \\(\\LaTeX\\), and more… We will change our portfolio pages by modifying these pages.\nThe files with a “.yml” extension are configuration files. We use them to set some rules that Quarto will apply to generate our pages. For example, we will modify the navigation bar (or navbar) through these files.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#the-preview-and-render-commands",
    "href": "2_quarto.html#the-preview-and-render-commands",
    "title": "2. Creating our content with Quarto",
    "section": "The preview and render commands",
    "text": "The preview and render commands\nQuarto allows us to create a properly designed website by only interacting with basic qmd files. We need however to see what results they yield.\nTo see the graphical result of our qmd files, we need to use two main commands : the quarto preview and quarto render commands.\nThe quarto preview command allows to see in real time what our qmd and yml yield. After entering it in the terminal console, it automatically opens a page on our default browser where we can see the graphical results of the latest saved version of our files. If there is an error with our files (for example a bad configuration within our yaml file), we will not be able to see correctly the results, and an error message will pop-up. We usually use it at the beginning of a work session, when we bring change to our portfolio.\nThe quarto render command allows to create html and css files from our qmd and yml files. We usually use it at the end of a work session, when we are satisfied with the changes we brought to the our website. Essentially, it does the same as the preview command, without opening a browser to see our changes in real time.\nLet’s try to run the quarto preview command :\n\n\n\nFigure 2.3 : Running the quarto preview command on the vscode terminal.\n\n\nWe should briefly see some blue text “preparing to preview”, followed by the names of our qmd files, before our default browser automatically launches itself.\nIf we did not modify the basic files, we should see something like this on our web browser :\n\n\n\nFigure 2.4 : The graphical result of an empty quarto project.\n\n\nOkay, we have our first graphical results ! What happened exactly here ? First, we entered quarto preview. Quarto first transformed all our qmd files in our folder in readable files for our web browser, i.e. html and css files. Then, it opened those html and css files with our default browser. What we are seeing is the result of this conversion from qmd to html and css.\n\nWe can notice that the URL of our page looks a bit different than the websites we usually access. Indeed, we should have something like “http://localhost:6986/”, or any other kind of four numbers combination. This is because Quarto is currently watching at our file, and will refresh the page as soon as any of our qmd or yaml files are changed and saved. Simply put, “localhost” means that it is our computer, and the four numbers are the port of our computer quarto is using to display the files.\n\n\nNow, our terminal is busy reading our files in the web browser. We can create a new terminal session by clicking on the “+” in vscode. To stop the process, we can click on our terminal and then enter ctrl+c (command+c for MacOS keyboards).",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-our-content",
    "href": "2_quarto.html#how-to-modify-our-content",
    "title": "2. Creating our content with Quarto",
    "section": "How to modify our content",
    "text": "How to modify our content\nNow that we rendered the first version of our page, how do we modify its content ?\nIf we want to modify the homepage of our website, we can go to the index.qmd file, and change directly the text. By default, Quarto should have filled the document with :\n---\ntitle: \"Home\"\n---\n\nThis is a Quarto website.\n\nTo learn more about Quarto websites visit &lt;https://quarto.org/docs/websites&gt;.\nThat yields the previous image.\nWe can modify it by writting for example :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year\nstudent of the Master of Research in Economics at Sciences Po. \nMy research interests are environmental economics. \n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nThis should yield :\n\n\n\nFigure 2.5 : Basic index page.\n\n\n\nWe should usually avoid putting our entire email adress directly in our webpage. Some bots are constantly scrapping webpages to get potential email adress that are later on the target of spam or fraudulous emails.\n\nAs we see, the changes are pretty straightforward. Since qmd files are basically a form of markdown file, we can use the markdown syntax for our content.\n\nIf you are not familiar with the markdown syntax, it is easy to understand. I encourage you to go check some documentation.\n\nFor plain text, note that we can enter jumplines without actually rendering a jumpline. If we want to do a breakline, we should let at least one empty line between two text chunks.\nWe are now going to cover some features of markdown.\n\nTitles and subtitles\nIf we write plain text in our qmd file, we will get normal text in our page. However, if we want to have titles and subtitles, we can use the # sign before it.\nIn this way, one # will yiel a title, two # a subtitle, etc., until the sixth level. With text filler, we could write the following code :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student of\nthe Master of Research in Economics at Sciences Po. \nMy research interests are environmental economics. \n\nFeel free to reach out to me at my email adress : \"paulo.gugelmocavalheirodias\"\nfollowed by \"@sciencespo.fr\" !\n\n# Title \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\n\n## A Subtitle \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\n\n### A subsubtitle \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris \nnisi ut aliquip ex ea commodo consequat.\nThis would then yield :\n\n\n\nFigure 2.6 : Example of titles and subtitles.\n\n\nIt is as simple as that, and by default, Quarto creates a table of content automatically for us in the right-side of our page !\n\n\nAdding links\nNow, if we want to add some link to our text, we are going to use the [text](link) markdown syntax. Concretely, the text will be between square brackets [], and the link we want between parenthesis ().\nFor example this code :\n\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nwill yield :\n\n\n\nFigure 2.7 : Example of links usage.\n\n\nAnd if we click on the links, we should be redirected to the URL we wrote !\n\n\nAdding documents and pictures\nNow, we could also want to include some pictures in our text. For example, some pdf of a long article we wrote or screeenshots.\nIn order to do so, we are going to use the ![Figure 2 : description](link) markdown syntax.\nIn the previous example, we had URL as links, that could be accessed on internet. Now, let’s imagine that we have a pdf file in our computer that we want to share on our portfolio. Usually, such a pdf is not available online on a public URL.\nThe first step we want to do is put the files we want to share in our folder in vscode. We should have something like that :\n\n\n\nFigure 2.8 : A vscode folder with files that we want to share.\n\n\nNote that in the left side of my screen, in the explorer bar, I now have to additional files : “screenshot.png” and “2_8_markdown_guide.pdf”.\nIf we want to include them, we could write :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nHere is an interesting website :\n\n![Figure 2.9 : A screenshot of the CRAN website.](screenshot.png)\n\nHere is an interesting guide : \n\n![Figure 2.10 : This is the Markdown guide, written by Matt Cone.](2_8_markdown_guide.pdf)\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nThis code would yield :\n\n\n\nFigure 2.11 : An attempt to include pictures and pdf\n\n\nWe see that the picture, a screenshot of the CRAN website, seems to work fine. However, the markdown guide, written by Matt Cone, and available here, is displayed in a smaller dimension than the page. This is due to the fact that we are trying to include a pdf as a picture. To include a pdf, we can thus use the normal link syntax, while directing to the emplacement of our pdf file. In this way, a syntax similar to You can read the markdown guide of Matt Conen [by clicking on this link](2_8_markdown_guide.pdf) would work better. We could thus write :\n---\ntitle: \"Home\"\n---\n\nHello, I am Paulo Gugelmo, currently a first year student\nof the\n[Master of Research in Economics](https://www.sciencespo.fr/ecole-recherche/en/academics/masters/master-economics/)\nat [Sciences Po](https://www.sciencespo.fr/en/). \nMy research interests are environmental economics and open source !\n\nHere is an interesting website :\n\n![Figure 2.12 : A screenshot of the CRAN website.](screenshot.png)\n\nYou can read the markdown guide of Matt Conen [by clicking on this link](2_8_markdown_guide.pdf)\n\nFeel free to reach out to me at my email adress :\n\"paulo.gugelmocavalheirodias\" followed by \"@sciencespo.fr\" !\nThat would yield :\n\n\n\nFigure 2.13 : Including a pdf document through a local link.\n\n\nAnd if we click on the link, we are redirected to the pdf file within our browser.\nFor the case of a portfolio, we could for example include our CV in this fashion.\n\n\nAdding code\nNow, we might want to include code snippets in our portfolio. For example, we have a project for which we wrote in R or any other languages, and we want to make the code easily accessible by our visitors.\nIn order for us to do that, we have two options. Either we want to include code inline, in which way we write our code between those reversed ticks (or “backticks”) : ``, or we want to include a code snippet, that has several lines, in which case we write three reversed ticks at the beginning and at the end of our code like this :\n```{r}\nprint(\"Hello world !\")\n```\nThe code will yield :\n\nprint(\"Hello world !\")\n\n[1] \"Hello world !\"\n\n\nWe are here touching one of the biggest strengths of Quarto. Despite being a “simple” static website generator, it allows us to include and execute code in our page. This can be very useful to display work that requires data treatment and/or other statistical computations.\nFor example, the following code in R :\n```{r}\ndata(iris) # load the freely accessible dataset named \"iris\"\nsummary(iris) # display a simple statistical summary of this dataset\nmodel = lm(iris$Sepal.Length ~ iris$Petal.Length)\n# create a linear model trying to explain the sepal length by the petal length\n\nplot(x = iris$Petal.Length,\n  y = iris$Sepal.Length, \n  xlab = \"Petal Length\",\n  ylab = \"Sepal Length\") # plot those two variables\nabline(model) # draw the linear regression line on the plot\n```\nWill generate :\n\ndata(iris) # load the freely accessible dataset named \"iris\"\nsummary(iris) # display a simple statistical summary of this dataset\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\nmodel = lm(iris$Sepal.Length ~ iris$Petal.Length)\n# create a linear model trying to explain the sepal length by the petal length\n\nplot(x = iris$Petal.Length,\n  y = iris$Sepal.Length, \n  xlab = \"Petal Length\",\n  ylab = \"Sepal Length\") # plot those two variables\nabline(model) # draw the linear regression line on the plot\n\n\n\n\n\n\n\n\n\nIf you don’t use R, don’t worry, Quarto also support several other languages, such as Python, Julia, and Observable JavaScript. In theory, if you know how to deal with code engine, you can also run other languages on Quarto.\n\n\n\nAdding math\nFinally, it’s also possible to add some math to our website. Indeed, markdown supports \\(\\LaTeX\\), and we can simply include our \\(\\LaTeX\\) code between dollar signs $ some math $ to generate inline math, or between two dollar signs $$ an equation $$ to generate math blocks.\nFor example, the following code :\nThe arithmetic mean $\\bar{x}$ is defined as : \n\n$$\n\\bar{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}\n$$\nwill produce :\nThe arithmetic mean \\(\\bar{x}\\) is defined as :\n\\[\n\\bar{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}\n\\]\n\nIf you are not familiar with \\(\\LaTeX\\) and will be in positions where you have to write documents with math in it, I highly recommend you familiarizing yourself with this language. The Overleaf website is a good place to start, and this guide here is very complete.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#how-to-modify-the-navigation-bar",
    "href": "2_quarto.html#how-to-modify-the-navigation-bar",
    "title": "2. Creating our content with Quarto",
    "section": "How to modify the navigation bar",
    "text": "How to modify the navigation bar\nNow that we are more proefficient in the generation of content, we can talk about the aspect of our portfolio. Without being website designers, we can recognize that an essential element of any website is the navigation bar. In Quarto, it is automatically displayed in all our pages, and we can only modify it in our _quarto.yml file. By default, we should have something similar to this :\nproject:\n  type: website\n\nwebsite:\n  title: \".\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nThat yields a navbar like :\n\n\n\nFigure 2.14 : The default navbar of Quarto\n\n\nIn this example, the content of the navigation bar, or “navbar”, are determined by all elements following the navbar element in the website list. Here, we see that it has two elements : the homepage, defined as the index.qmd file, and the about page, defined as the about.qmd file.\nNormally, the title of our page should appear in our browser, despite not being specified in our navbar. This is the default setting of Quarto. To unable this option, we can add title: false in our navbar list :\nwebsite:\n  title: \".\"\n  navbar:\n    title: false\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nThis should yield :\n\n\n\nFigure 2.15 : A navbar without title.\n\n\nWe may however want to keep it. in this case, it should be better to modify the title of our webpage to a customed one, like our name. For example, in my case :\nwebsite:\n  title: \"Paulo Gugelmo Cavalheiro Dias\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\nNow, to add a new page to our navbar, we can add an element in the left or right list such as :\nwebsite:\n  title: \"Paulo Gugelmo Cavalheiro Dias\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - projects.qmd\n      - about.qmd\nFor this configuration to work, we must first create a projects.qmd file beforehand in our folder. This will then implement a new link in the navbar, displayed in its left part, having for name the title of the file, i.e. here Projects :\n---\ntitle: \"Projects\"\n--- \n\nWelcome to my projects webpage. You will find here a list of ongoing or past projects I worked on. \nIf we now combine the two mentioned code, we should have something like :\n\n\n\n\n\n\n\n\n\nFigure 2.16 : Our vscode interface.\n\n\n\n\n\n\n\nFigure 2.17 : The graphical result.\n\n\n\n\n\n\nAdding a new document to the navbar",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#output-directory",
    "href": "2_quarto.html#output-directory",
    "title": "2. Creating our content with Quarto",
    "section": "Output directory",
    "text": "Output directory\nA final important point for the publication of our website in the last chapter is the out-put directory.\nIn order for us to configure the output directory, we are going to change our _quarto.yml file to add the output-dir line :\nproject:\n  type: website\n  output-dir: docs\nThis line tells Quarto to create a subdirectory called “docs” to store the html and css files. It is important to specify this so that GitHub Pages recognize more easily our files to publish them.\nTherefore, make sure to add this line, run quarto render, and check that the “docs” directory is created in the folder.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  },
  {
    "objectID": "2_quarto.html#further-resources",
    "href": "2_quarto.html#further-resources",
    "title": "2. Creating our content with Quarto",
    "section": "Further resources",
    "text": "Further resources\nAt this point, we roughly covered the basics of Quarto. Although not complete, our portfolio is functional. If we wish to dive further into the personalization of our website (which is probably the case), we can spend more time reading their documentation.\nQuarto is a very powerful tool. We can use it to quickly produce content and maintain it with the presented workflow in this tutorial. I highly recommend the reading of their documentation here, and more specifically to follow through their Get Started guide.",
    "crumbs": [
      "Home",
      "2. Creating our content with Quarto"
    ]
  }
]